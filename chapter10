Chapter 10
len used with list shows you list lenght, but sublists count as one item no matter how many items they hold
id returns the id of that str
you can * lists and strings
list = [1,2,3]
print(list*3) = [1,2,3,1,2,3,1,2,3]

*lists ARE mutable unilike strings

fruit = ["banana", "apple", "cherry"]
print(fruit)

fruit[0] = "pear"
fruit[-1] = "orange"
print(fruit)

OUTPUT
['banana', 'apple', 'cherry']
['pear', 'apple', 'orange']

*you can slice lists
a_list = ['a', 'b', 'c', 'd', 'e', 'f']
print(a_list[1:3])
print(a_list[:4])
print(a_list[3:])
print(a_list[:])

An assignment to an element of a list is called item
assignment. Item assignment does not work for strings. Recall that strings are immutable.
 
* you can you del (delete) to remove items at any index.

Things we can do with lists
-sort()
-access members by index using[] ***
-get length using len() ***
-append() *** 
-insert()
-pop
-concatenate + ***
-assign a value to a given index: my_list[3]='a' ***
-slice - my_list[start:end] ***
-clone - my_list[:]  ***

concatenation always creates new lists

my_list = [1,2,3,4,5,6]
firsthalf = my_list[:3]
secondhalf = my_list[4:]
glue = firsthalf + secondhalf
glue = [1,2,3,4,5,6] <<< has the same as my_list but is not the same list


slicing is a piece of a list
cloning is almost a duplicate of the list (not the same list)

str.insert(2, 'z') = inserts 'z' to index 2 and pushes the other chars back a space
        [1,2,3] becomes [1,2, z, 3]

alist[1:2] = [2] keeps it a list
alist[2] = 2 shows what item was at index 2 and doesn't keep as a list

a 'reference' is a pointer[literally a memory address like a street address] to an object in memory.

when we call a function and pass it a reference variable(e.g. something that holds a list) the function
can CHANGE that object. Passing by reference.

when we call a function and pass it a primitive value(can't be broken down) that value is copied in. Passing by value

**Primitives** passed by value
ints, floats, true, false

**Non-primitives** always passed by reference
objects (like turtles), str/collections/lists



